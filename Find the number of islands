//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    void dfs(vector<vector<char>> &grid,int i,int j,int rows,int cols){
        
        if(i<0||i>=rows||j<0||j>=cols||grid[i][j]!='L')
            return;
        
        grid[i][j]='V';
        
        dfs(grid,i+1,j,rows,cols);//Down
        dfs(grid,i,j+1,rows,cols);//Right
        dfs(grid,i-1,j,rows,cols);//UP
        dfs(grid,i,j-1,rows,cols);//Left
        dfs(grid,i-1,j-1,rows,cols);//VERTICALLY UPWARD left
        dfs(grid,i+1,j+1,rows,cols);//VERTICALLY DOWNWARD right
        dfs(grid,i-1,j+1,rows,cols);//VERTICALLY UPWARD right
        dfs(grid,i+1,j-1,rows,cols);//VETICALLY DOWNWARD LEFT
    }
    int countIslands(vector<vector<char>>& grid) {
        // Code here
         int count=0;
         
         if(grid.size()==0) return 0;
         
         int rows=grid.size();
         int cols=grid[0].size();
         
         for(int i=0;i<rows;i++){
             for(int j=0;j<cols;j++){
                 if(grid[i][j]=='L'){
                     dfs(grid,i,j,rows,cols);
                     count=count+1;
                 }
             }
         }
         return count;
    }
};


//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.countIslands(grid);
        cout << ans << '\n';

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends
