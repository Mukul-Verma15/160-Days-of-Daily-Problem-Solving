int findClosest(vector<int>& arr, int lo, int hi, int complement) {
    int res = arr[lo];
    
    while (lo <= hi) {
        int mid = (lo + hi) / 2;

        // Update answer if we find a closer element
        if (abs(arr[mid] - complement) < abs(res - complement))
            res = arr[mid];
      
        // If there is a tie, then we pick the larger value
        else if(abs(arr[mid] - complement) == abs(res - complement))
            res = max(res, arr[mid]);   
        
        if (arr[mid] == complement) 
            return arr[mid];
        else if (arr[mid] < complement)
            lo = mid + 1;
        else 
            hi = mid - 1;
    }

    return res;
}

// Find pair with sum closest to target and max absolute difference
vector<int> sumClosest(vector<int>& arr, int target) {
  
    int n = arr.size();
    sort(arr.begin(), arr.end());
    vector<int> res;
    int minDiff = INT_MAX;

    for (int i = 0; i < n - 1; i++) {
      
        // Use binary search in arr[i+1...n-1] to  
        // find the element closest to (target - arr[i])
        int complement = target - arr[i];
        int closest = findClosest(arr, i + 1, n - 1, complement);
      
        int currDiff = abs(target - arr[i] - closest);
        if(currDiff < minDiff) {
            minDiff = currDiff;
            res = {arr[i], closest};
        }
    }

    return res;
}
